* write more tests

* put libraries in ~/Programming/libs or proj_root/libs?

* Use qt gui to provide shadertoy like editing.

*Audio preprocessing is a huge ingredient in creating cool visualizations. Imagine being given a set of audio samples in a gl texture and drawing that to the screen using a fragment shader. Now imagine that you want to apply some smoothing to those audio samples. If that is the case, then you will need to read and process the whole texture for each and every pixel (because your writing shader code, not pulse.cpp code, because we like writing shader code and not application code). That is amazingly inefficient and just not acceptable. I think there are other examples where a person might want to preprocess the audio (or fft) that are either inefficient or impossible in shader code.

* Originally I wanted to try and expose as much of the app's internal configuration as possible, particularly w.r.t. audio preprocessing.

* Figure out some way to improve the audio visualization. Many sounds still show a very chaotic waveform.